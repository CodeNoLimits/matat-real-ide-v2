// ü§ñ OpenRouter AI Service - ChatGPT-4o Integration
// High-quality AI agent for code review and project analysis

class OpenRouterAI {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = 'https://openrouter.ai/api/v1';
        this.model = 'openai/chatgpt-nano-5'; // ChatGPT Nano 5 - Nouveau et moins cher
        this.maxTokens = 4096;
    }

    async chat(messages, options = {}) {
        try {
            const response = await fetch(`${this.baseURL}/chat/completions`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://matat-real-ide.com',
                    'X-Title': 'MATAT REAL IDE - AI Code Assistant'
                },
                body: JSON.stringify({
                    model: this.model,
                    messages,
                    max_tokens: options.maxTokens || this.maxTokens,
                    temperature: options.temperature || 0.7,
                    top_p: options.topP || 0.9,
                    frequency_penalty: options.frequencyPenalty || 0,
                    presence_penalty: options.presencePenalty || 0,
                    stream: false
                })
            });

            if (!response.ok) {
                const error = await response.text();
                throw new Error(`OpenRouter API error: ${response.status} - ${error}`);
            }

            const data = await response.json();
            return {
                success: true,
                content: data.choices[0].message.content,
                usage: data.usage,
                model: data.model
            };

        } catch (error) {
            console.error('OpenRouter AI Error:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async codeReview(code, language, context = {}) {
        const systemPrompt = `Tu es un expert en d√©veloppement logiciel et architecte technique senior.
Tu analyses du code avec une pr√©cision chirurgicale et donnes des conseils pratiques et actionnables.

Contexte du projet: MATAT REAL IDE - Un IDE moderne avec terminal PTY, Socket.io, React TypeScript
Langage: ${language}
Fichier actuel: ${context.currentFile || 'Non sp√©cifi√©'}

Instructions:
1. Analyse le code pour les bugs, probl√®mes de performance, et s√©curit√©
2. Propose des am√©liorations concr√®tes avec exemples de code
3. V√©rifie les bonnes pratiques et conventions
4. Sugg√®re des optimisations
5. Identifie les vuln√©rabilit√©s potentielles

R√©ponds en fran√ßais avec un ton professionnel mais accessible.`;

        const userPrompt = `Voici le code √† analyser:

\`\`\`${language}
${code}
\`\`\`

${context.selectedCode ? `\nCode s√©lectionn√© sp√©cifiquement:\n\`\`\`${language}\n${context.selectedCode}\n\`\`\`` : ''}

Peux-tu faire une revue de code compl√®te ?`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }

    async explainCode(code, language, context = {}) {
        const systemPrompt = `Tu es un mentor en programmation expert qui explique le code de mani√®re claire et p√©dagogique.

Contexte: MATAT REAL IDE - ${context.projectInfo || 'Projet de d√©veloppement'}
Langage: ${language}

Instructions:
1. Explique ce que fait le code √©tape par √©tape
2. Identifie les patterns et architectures utilis√©s
3. Explique les choix techniques
4. Mentionne les concepts importants
5. Sugg√®re des ressources pour approfondir

R√©ponds en fran√ßais avec des exemples concrets.`;

        const userPrompt = `Explique-moi ce code:

\`\`\`${language}
${code}
\`\`\`

${context.questions ? `\nQuestions sp√©cifiques: ${context.questions}` : ''}`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }

    async optimizeCode(code, language, context = {}) {
        const systemPrompt = `Tu es un expert en optimisation de code et performance.

Contexte: MATAT REAL IDE
Langage: ${language}
Focus: ${context.optimizationType || 'performance g√©n√©ral'}

Instructions:
1. Analyse les goulets d'√©tranglement
2. Propose des optimisations concr√®tes avec code
3. Explique l'impact de chaque optimisation
4. Maintiens la lisibilit√© du code
5. Respecte les bonnes pratiques

R√©ponds en fran√ßais avec exemples de code optimis√©.`;

        const userPrompt = `Optimise ce code:

\`\`\`${language}
${code}
\`\`\`

${context.performanceIssues ? `\nProbl√®mes identifi√©s: ${context.performanceIssues}` : ''}`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }

    async projectAnalysis(projectStructure, context = {}) {
        const systemPrompt = `Tu es un architecte logiciel senior qui analyse des projets complets.

Contexte: MATAT REAL IDE - Analyse de projet
Objectif: √âvaluation architecturale et recommandations

Instructions:
1. Analyse la structure du projet
2. √âvalue l'architecture g√©n√©rale
3. Identifie les points d'am√©lioration
4. Sugg√®re des refactoring prioritaires
5. Propose un plan d'action

R√©ponds en fran√ßais avec des recommandations pratiques.`;

        const userPrompt = `Analyse ce projet:

Structure:
${projectStructure}

${context.specificConcerns ? `\nPr√©occupations sp√©cifiques: ${context.specificConcerns}` : ''}
${context.goals ? `\nObjectifs: ${context.goals}` : ''}`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }

    async debugHelp(error, code, language, context = {}) {
        const systemPrompt = `Tu es un expert en debugging qui r√©sout les probl√®mes de code efficacement.

Contexte: MATAT REAL IDE
Langage: ${language}
Environnement: ${context.environment || 'D√©veloppement'}

Instructions:
1. Analyse l'erreur et le code
2. Identifie la cause racine
3. Propose des solutions √©tape par √©tape
4. Sugg√®re des moyens de pr√©venir ce type d'erreur
5. Donne des conseils de debugging

R√©ponds en fran√ßais avec des solutions concr√®tes.`;

        const userPrompt = `J'ai cette erreur:

Erreur: ${error}

Code probl√©matique:
\`\`\`${language}
${code}
\`\`\`

${context.stackTrace ? `\nStack trace:\n${context.stackTrace}` : ''}
${context.steps ? `\n√âtapes pour reproduire: ${context.steps}` : ''}`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }

    async generateCode(description, language, context = {}) {
        const systemPrompt = `Tu es un d√©veloppeur expert qui g√©n√®re du code propre et fonctionnel.

Contexte: MATAT REAL IDE
Langage: ${language}
Framework: ${context.framework || 'Standard'}

Instructions:
1. G√©n√®re du code propre et bien structur√©
2. Utilise les bonnes pratiques du langage
3. Ajoute des commentaires explicatifs
4. Inclus la gestion d'erreurs
5. Respecte les conventions de nommage

R√©ponds en fran√ßais avec le code complet.`;

        const userPrompt = `G√©n√®re du code pour:

${description}

${context.requirements ? `\nExigences sp√©cifiques:\n${context.requirements}` : ''}
${context.existingCode ? `\nCode existant √† int√©grer:\n\`\`\`${language}\n${context.existingCode}\n\`\`\`` : ''}`;

        return await this.chat([
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ]);
    }
}

module.exports = OpenRouterAI;